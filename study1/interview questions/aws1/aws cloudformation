Description: Creating ec2 instance with a webserver using aws cloudformation
Resources:
	MyEC2WebserverSecurityGroup:
		Type: AWS::EC2::SecurityGroup
		Properties:
			GroupDescription: Open port number 80 for httpd webserver
			SecurityGroupIngress:
			- IpProtocol: tcp
			  FromPort: '80'
			  ToPort: '80'
			  CidrIp: 0.0.0.0/0
	Ec2Instance:
		Type: AWS::EC2::Instance
		Properties:
			InstanceType: t2.micro
			ImageId: ami-0732b62d310b80e97  # Amazon Linux AMI in ap-south-1
			UserData:
				'Fn::Base64':
				  !Sub  |
					#!/bin/bash
					yum -y update
					# install httpd webserver
					yum install -y httpd
					# start server
					service httpd start
					chkconfig httpd on
			SecurityGroups:
				- !Ref  MyEC2WebserverSecurityGroup
			Tags:
				- Key: Name
				  Value: My EC2 Instance
				- Key: Description
				  Value: Ec2 instance with webserver created from cloudformation
				- Key: Owner
				  Value: AWS learning
	Outputs:
		Website:
			Description: Website url of the ec2 instance
			Value: !Sub  'http://${Ec2Instance.PublicDnsName}'
		MyEC2InstancePublicIP:
		
			Description: Public ip of the ec2 instance
			Value: !GetAtt  Ec2Instance.PublicIp
		MyEC2InstanceInstanceId:
			Description: My ec2 instance id
			Value: !Ref  Ec2Instance

==========lambda=============
AWSTemplateFormatVersion: "2010-09-09"
Description: "This template will be used to deploy IAM resources for the Veeva Network data provider."
Parameters:
  EnvironmentName:
    Description: Environment type.
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
      - test
      - preprod

Resources:
  UnzipLambdaFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      FunctionName: validate-zipfiles
      Role: !GetAtt UnzipLambdaRole.Arn
      Runtime: python3.8
      MemorySize: 10240
      Timeout: 900
      Handler: index.lambda_handler
      Code:
        ZipFile: |          
          import json
          import zipfile
          import os
          import boto3
          from boto3 import client
          from urllib.parse import unquote_plus
          import io
          import re
          import gzip

          exclude_list = ["exe", "scr", "vbs", "js", "xml", "docm", "xps"]
          sns = boto3.client('sns' )

          def perform_unzip(zip_bytes, bucket, key, s3_client):
              zip = zipfile.ZipFile(zip_bytes)
              fil = zip.namelist()
              prefix = '/'.join(key.split('/')[:-1]) + '/unzipped/'
              for x in fil:
                  if x.lower().split('.')[-1] in exclude_list:
                      raise Exception('File contains extensions in exlcluded list')
                      env = bucket.split('-')[2].upper()
                      sns.publish(
                              TopicArn = 'arn:aws:sns:us-east-1:${AWS::AccountId}:notify-nonstandard-filetypes',
                              Subject = "{}: S3 upload warning: Non standard File encountered".format(EnvironmentName),
                              Message = 'Non standard File encountered' + key) 
                  target_file = prefix + x
                  try:
                      s3_client.head_object(Bucket=bucket, Key=target_file)
                      print('File already exists: ', target_file)
                  except:
                      s3_client.put_object(Body=zip.read(x), Key=target_file, Bucket=bucket)
                      print('File added to the unzipped folder: ', target_file)

          def lambda_handler(event, context):
              key = unquote_plus(event['Records'][0]['s3']['object']['key'])
              bucket = unquote_plus(event['Records'][0]['s3']['bucket']['name'])
              if key.lower().endswith('.zip') or key.lower().endswith('.001'):
                  s3_client = boto3.client('s3')
                  obj = s3_client.get_object(Bucket=bucket, Key=key)
                  with io.BytesIO(obj["Body"].read()) as zip_bytes:
                      perform_unzip(zip_bytes, bucket, key, s3_client)
              else:
                  print('Not a zipfile')

  EventRule:
    Type: AWS::Events::Rule
    DeletionPolicy: Retain
    Properties:
      Description: EventRule
      State: ENABLED
      EventPattern: #https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html#eb-filtering-data-
        source:
          - aws.s3
        detail-type:
          - "Object Created"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - "PutObject"
          bucket:
            name:
              - !Sub 'emds-datalake-${EnvironmentName}-landingzone'
      Targets:
        - Arn: !GetAtt UnzipLambdaFunction.Arn
          Id: validate-zipfiles
  
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    DeletionPolicy: Retain
    Properties:
      FunctionName: !GetAtt UnzipLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::emds-datalake-${EnvironmentName}-landingzone'

  # LambdaTrigger:
  #   Type: 'AWS::Lambda::EventSourceMapping'
  #   DeletionPolicy: Retain
  #   Properties:
  #     EventSourceArn: !Sub 'arn:aws:s3:::emds-datalake-${EnvironmentName}-landingzone'
  #     FunctionName: !GetAtt UnzipLambdaFunction.Arn
  #     BatchSize: 1
  #     StartingPosition: "LATEST"

  UnzipLambdaRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      RoleName: 'validate-zipfiles-role-new'
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole-17d43d07-18ea-4269-83d5-efe0969affc9
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:us-east-1:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/lambda/validate-zipfiles:*'
        - PolicyName: AmazonSNSFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - sns:*
                Effect: Allow
                Resource: "*"
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource: "*"
        - PolicyName: CloudWatchEvents
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutTargets
                Resource: "*"
              - Effect: Allow
                Action: events:DescribeRule
                Resource: "*"
              - Effect: Allow
                Action: events:ListTargetsByRule
                Resource: "*"
