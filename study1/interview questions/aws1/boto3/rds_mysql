#======================RDS crud, secret manager=====================
import boto3, import pymysql, import json, import os
secrets_client = boto3.client('secretsmanager')
# Get secret name from environment variable
secret_name = os.environ['DB_SECRET_NAME']
region_name = os.environ.get('AWS_REGION', 'us-east-1')
def get_db_credentials():
    """Fetch DB credentials from AWS Secrets Manager"""
    response = secrets_client.get_secret_value(SecretId=secret_name)
    secret = json.loads(response['SecretString'])
    return secret  # returns dict with {host, username, password, dbname}
def lambda_handler(event, context):
    creds = get_db_credentials()
    connection = pymysql.connect(
        host=creds['host'],
        user=creds['username'],
        passwd=creds['password'],
        db=creds['dbname'],
        connect_timeout=5
    )
    action = event.get("action", "read")
    cursor = connection.cursor()
    try:
        if action == "create":
            query = "INSERT INTO users (name, email) VALUES (%s, %s)"
            cursor.execute(query, (event['name'], event['email']))
            connection.commit()
            return {"status": "success", "message": "Record inserted"}
        elif action == "read":
            query = "SELECT * FROM users WHERE id=%s"
            cursor.execute(query, (event['id'],))
            row = cursor.fetchone()
            return {"status": "success", "data": row}
        elif action == "update":
            query = "UPDATE users SET email=%s WHERE id=%s"
            cursor.execute(query, (event['email'], event['id']))
            connection.commit()
            return {"status": "success", "message": "Record updated"}
        elif action == "delete":
            query = "DELETE FROM users WHERE id=%s"
            cursor.execute(query, (event['id'],))
            connection.commit()
            return {"status": "success", "message": "Record deleted"}
        else:
            return {"status": "error", "message": "Invalid action"}
    finally:
        cursor.close()
        connection.close()
