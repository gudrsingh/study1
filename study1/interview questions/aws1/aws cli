Identity & Access Management (IAM)
• aws iam list-users
• aws sts get-caller-identity
S3
• aws s3 ls
• aws s3 cp myfile.txt s3://mybucket/
• aws s3 sync ./localdir s3://mybucket --delete
• aws s3 cp s3://mybucket/myfile.txt .
EC2
• aws ec2 describe-instances --filters "Name=instance-state-name,Values=running"
• aws ec2 start-instances --instance-ids i-0123456789abcdef0
• aws ec2 stop-instances --instance-ids i-0123456789abcdef0
# create a new instance
aws ec2 run-instances \ --image-id ami-f0e7d19a \	--instance-type t2.micro \
    --security-group-ids sg-00000000 \    --dry-run
RDS
• aws rds describe-db-instances
EKS
• aws eks update-kubeconfig --region us-east-1 --name my-cluster
CloudWatch / Logs
• aws logs get-log-events --log-group-name my-log-group --log-stream-name my-log-stream
aws logs create-log-group \	--log-group-name "DefaultGroup"
Secrets Manager
• aws secretsmanager get-secret-value --secret-id my-secret
=====================       IAM       ==================
# list all user's info ->   aws iam list-users
# list all user's usernames -> aws iam list-users --output text | cut -f 6
# list current user's info  -> aws iam get-user
# list current user's access keys -> aws iam list-access-keys
# crate new user
aws iam create-user \
    --user-name aws-admin2
# create multiple new users, from a file
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam create-user \
        --user-name $userName
done
# list all users
aws iam list-users --no-paginate
# get a specific user's info
aws iam get-user \
    --user-name aws-admin2
# delete one user
aws iam delete-user \
    --user-name aws-admin2
# delete all users
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done
================      access keys                         ====
aws iam list-access-keys

# list access keys of a specific user
aws iam list-access-keys \
    --user-name aws-admin2

# create a new access key
aws iam create-access-key \
    --user-name aws-admin2 \
    --output text | tee aws-admin2.txt
=============       Password policy            ==========
aws iam get-account-password-policy
aws iam update-account-password-policy \ 	--minimum-password-length 12 \ 	--require-symbols \
	--require-numbers \ --require-uppercase-characters \	--require-lowercase-characters \	--allow-users-to-change-password

===========       S3  S3   S3  S3 =====================
# create a bucket name, using the current date timestamp
bucket_name=test_$(date "+%Y-%m-%d_%H-%M-%S")
echo $bucket_name
# create a public facing bucket
aws s3api create-bucket --acl "public-read-write" --bucket $bucket_name
# verify bucket was created
aws s3 ls | grep $bucket_name
# check for public facing s3 buckets (should show the bucket name you created)
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then echo {} ; fi'
# check for public facing s3 buckets, updated them to be private
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then aws s3api put-bucket-acl --acl "private" --bucket {} ; fi'
# check for public facing s3 buckets (should be empty)
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then echo {} ; fi'

======== EC2   EC2    EC2 key pair   EC2   EC2   EC2   =======================
# list all instances running
aws ec2 describe-instances --filters Name=instance-state-name,Values=running
# create a new instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html
aws ec2 run-instances \ --image-id ami-f0e7d19a \	--instance-type t2.micro \
    --security-group-ids sg-00000000 \    --dry-run
# stop an instance
aws ec2 terminate-instances \    --instance-ids <instance_id>
# list all running instance, Name tag and Public IP Address
aws ec2 describe-instances \  --filters Name=instance-state-name,Values=running \
  --query 'Reservations[].Instances[].[PublicIpAddress, Tags[?Key==`Name`].Value | [0] ]' \
  --output text | sort -k2
# create a keypair
aws ec2 create-key-pair \     --key-name <value> --output text
# create a new local private / public keypair, using RSA 4096-bit
ssh-keygen -t rsa -b 4096
# import an existing keypair
aws ec2 import-key-pair \    --key-name keyname_test \ --public-key-material file:///home/apollo/id_rsa.pub
# delete a keypair
aws ec2 delete-key-pair \  --key-name <value>
======== SG    SG    SG   SG    SG     SG   =================
# create a security group
aws ec2 create-security-group \  --vpc-id vpc-1a2b3c4d \  --group-name web-access \  --description "web access"
# list details about a securty group
aws ec2 describe-security-groups \    --group-id sg-0000000
# open port 80, for everyone
aws ec2 authorize-security-group-ingress \ --group-id sg-0000000 \  --protocol tcp \
    --port 80 \    --cidr 0.0.0.0/24
# get my public ip
my_ip=$(dig +short myip.opendns.com @resolver1.opendns.com); echo $my_ip
# open port 22, just for my ip
aws ec2 authorize-security-group-ingress \ --group-id sg-0000000 \ --protocol tcp \
    --port 80 \  --cidr $my_ip/24
# remove a firewall rule from a group
aws ec2 revoke-security-group-ingress \ --group-id sg-0000000 \ --protocol tcp \
    --port 80 \  --cidr 0.0.0.0/24
# delete a security group
aws ec2 delete-security-group \    --group-id sg-00000000

=======   AMI      Images     ===========
# list all private AMI's, ImageId and Name tags
aws ec2 describe-images --filter "Name=is-public,Values=false" \    --query 'Images[].[ImageId, Name]' \
    --output text | sort -k2
# delete an AMI, by ImageId
aws ec2 deregister-image --image-id ami-00000000